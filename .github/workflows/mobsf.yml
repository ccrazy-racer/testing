# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MobSF

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '35 2 * * 6'

permissions:
  contents: read

jobs:
#   build:

#     runs-on: macos-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Set Default Scheme
#         run: |
#           scheme_list=$(xcodebuild -list -json | tr -d "\n")
#           default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
#           echo $default | cat >default
#           echo Using default scheme: $default
          
#       - name: Build
#         env:
#           scheme: ${{ 'default' }}
#           platform: ${{ 'iOS Simulator' }}
#         run: |
#           # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
#           device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
#           if [ $scheme = default ]; then scheme=$(cat default); fi
#           if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
#           file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
#           xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

  mobile-security:
#     needs: build
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
          
      - name: Get current date
        id: date
        run: echo "$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Test with environment variables
        run: echo $TAG_NAME - $RELEASE_NAME
        env:
          TAG_NAME: report-tag-${{ steps.date.outputs.date }}

      - name: Run mobsfscan
        uses: MobSF/mobsfscan@main
        with:
          args: . --sarif --output ${{ steps.date.outputs.date }}.sarif || true
          
      - name: Upload mobsfscan report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.date.outputs.date }}.sarif
          
      - name: Run Python Script
        run: python ./verifyResults.py
      
